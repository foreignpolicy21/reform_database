`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
Summary = answer)
sources <- read_csv("versions/sources.csv")[-1]
# select the right files
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
Summary = answer)
View(sources)
write_csv(sources, "sources_updated.csv")
library(tidyverse)
library(pdftools)
library(httr)
sources <- read_csv("sources.csv")[-1]
# select the right files
sources <- sources %>%
select(`Title`, `Item Type`, Author, `Publication Title`, `File Attachments`, Url, Date, Publisher, Type) %>%
mutate(`Organization or Publisher` = ifelse(`Item Type` == "magazineArticle", `Publication Title`, Publisher), # combine Publication Title and Publisher to Organization or Publisher
`Source Type` = Type) %>% # add a Source Type based on Report Type parameter from Zotero
# rename document types
mutate(`Document Type` = str_replace(`Item Type`, "report", "Report"),
`Document Type` = str_replace(`Document Type`, "magazineArticle", "Op-Ed"),
`Document Type` = str_replace(`Document Type`, "bookSection", "Book Section"),
`Document Type` = str_replace(`Document Type`, "book", "Book"),
`Document Type` = str_replace(`Document Type`, "document", "Misc Document")) %>%
select(-c(`Publication Title`, Publisher, `Item Type`, Type))
# noncomprehensive lists of organizations in source type categorizing for assigning Source Type to various sources that do not have them via Zotero
magazines <- c("American Purpose", "The Foreign Service Journal", "Just Security", "Foreign Policy", "Democracy Journal", "Responsible Statecraft", "Foreign Affairs")
thinktanks <- c("The Brookings Institution", "The Aspen Institute","Hoover Institution Press, Stanford University")
govt_offices <- c("U.S. Department of State: Office of Inspector General", "U.S. Department of State")
academic <- c("RAND Graduate School")
nonprofits <- c("Foreign Policy Association")
# hand-label misc documents' Source Types
sources <- sources %>%
mutate(`Source Type` = ifelse(`Organization or Publisher` %in% govt_offices, "Government Office", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% thinktanks, "Think Tank", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% nonprofits, "Nonprofit", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% academic, "Academic", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% magazines, "News Media",`Source Type`))
sources <- sources %>%
mutate(`Path to PDF` = "",
`Document Text` = "")
fpaths_cleaned <- c()
# remove spaces ONLY from start and end of string
remove_spaces <- function(string) {
string <- sub("^\\s+", "", string)
string <- sub("\\s+$", "", string)
string
}
# check if filepath ends in "pdf"
is_pdf <- function(string) {
substr(string,nchar(string)-2,nchar(string)) == "pdf"
}
for (i in 1:nrow(sources)) {
fpath <- sources[i,]$`File Attachments`
# split by semicolon
fpath_cands <- strsplit(fpath, ";")
# remove whitespace on front & back
fpath_cands <- lapply(fpath_cands, remove_spaces)
# return the first one ending with "pdf"
pdf_path_index <- head(which(sapply(fpath_cands, is_pdf)), 1)
new_fpath <- ifelse(length(pdf_path_index) > 0, fpath_cands[[1]][pdf_path_index], "")
if(nchar(new_fpath) != 0) {
sources[i,]$`Path to PDF` <- new_fpath
# get the full text
filetext <- pdf_text(new_fpath)
filetext_cat <- paste(filetext, collapse = " ")
filetext_cleaned <- gsub("\n", "", filetext_cat)
sources[i,]$`Document Text` <- filetext_cleaned
}
}
View(sources)
write_csv(sources, "sources_updated.csv")
write_csv(sources, "sources_with_summaries.csv")
sources <- read_csv("sources_with_summaries.csv")[-1]
View(sources)
sources %>% filter("Discusses the document, which is titled" %in% answer)
sources %>% filter("Discusses the document" %in% answer)
sources %>% filter(str_detect(answer, "Discusses the document, which is titled"))
sources %>%
mutate(answer = if(str_detect(answer, "Discusses the document, which is titled"), "", answer))
sources %>%
mutate(answer = ifelse(str_detect(answer, "Discusses the document, which is titled"), "", answer))
sources <- read_csv("sources_with_summaries.csv")[-1]
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
Summary = answer)
sources %>%
mutate(answer = ifelse(str_detect(answer, "Discusses the document, which is titled"), "", answer)) %>%
filter(str_detect(answer, "Discusses the document, which is titled"))
sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
filter(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"))
sources <- read_csv("sources_with_summaries.csv")[-1]
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer)
sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
filter(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"))
sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`))
sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
filter(`Document Type` == "Op-Ed")
source <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`))
write_csv(sources, "sources_updated.csv")
sources <- read_csv("sources_with_summaries.csv")
View(sources)
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer)
source <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`))
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer,
URL = Url)
sources <- sources %>% rename(URL = Url))
sources <- sources %>% rename(URL = Url)
write_csv(sources, "sources_updated.csv")
# remove bad GPT summary columns
source <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`))
write_csv(sources, "sources_updated.csv")
# remove bad GPT summary columns
sources <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`))
write_csv(sources, "sources_updated.csv")
# remove bad GPT summary columns
sources <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "NA"), "", `Summary (from GPT)`))
sources %>% filter(`Summary (from GPT)` == "NA")
library(tidyverse)
sources <- read_csv("sources_updated.csv")[-1]
sources_with_summaries <- sources
colnames(sources)
unique(sources$`Source Type`)
sources %>% filter(is.na(`Source Type`))
unique(sources$`Source Type`)
sources %>% filter(is.na(`Source Type`))
unique(sources$`Source Type`)
sources %>% filter(is.na(`Source Type`))
# noncomprehensive lists of organizations in source type categorizing for assigning Source Type to various sources that do not have them via Zotero
magazines <- c("American Purpose", "The Foreign Service Journal", "Just Security", "Foreign Policy", "Democracy Journal", "Responsible Statecraft", "Foreign Affairs")
thinktanks <- c("The Brookings Institution", "The Aspen Institute","Hoover Institution Press, Stanford University", "RAND Corporation")
govt_offices <- c("U.S. Department of State: Office of Inspector General", "U.S. Department of State")
academic <- c("RAND Graduate School", "Institute for the Study of Diplomacy", "Penn State University Press")
nonprofits <- c("Foreign Policy Association", "American Academy of Diplomacy")
sources <- sources %>%
mutate(`Source Type` = ifelse(`Organization or Publisher` %in% govt_offices, "Government Office", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% thinktanks, "Think Tank", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% nonprofits, "Nonprofit", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% academic, "Academic", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% magazines, "News Media",`Source Type`))
unique(sources$`Source Type`)
sources %>% filter(is.na(`Source Type`))
unique(sources$`Source Type`)
write_csv(sources, "sources_updated.csv")
sources %>% ggplot(aes(x = values)) +
geom_histogram(binwidth = 0.2, fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency"))
sources %>% ggplot(aes(x = values)) +
geom_histogram(binwidth = 0.2, fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% ggplot(aes(x = `Source Type`)) +
geom_histogram(binwidth = 0.2, fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% ggplot(aes(x = `Source Type`)) +
geom_histogram(stat = count,
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% ggplot(aes(x = `Source Type`, stat = count)) +
geom_histogram(
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% ggplot(aes(x = `Source Type`), stat = count) +
geom_histogram(
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% ggplot(aes(x = `Source Type`)) +
geom_histogram(stat = "count",
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(values) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_histogram(stat = "count",
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_histogram(stat = "count",
binwidth = 0.2,
fill = "blue",
color = "black",
alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% filter(`Source Type` == "Think Thank")
sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`))
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`))
unique(sources$`Source Type`)
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources <- read_csv("sources_updated.csv")[-1]
sources_with_summaries <- sources
unique(sources$`Source Type`)
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
# arrange(count) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Histogram of Random Values") +
xlab("Values") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Frequency")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- sources %>% mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`)))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- sources %>% mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`)))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
colnames(sources)
unique(sources$`Document Type`)
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Document Type") +
ylab("Count")
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Document Type") +
ylab("Count")
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Document Type") +
ylab("Count")
sources <- read_csv("sources_updated.csv")[-1]
sources_with_summaries <- sources
# change sources to factor. Maybe move this to cleaning document
sources <- sources %>% mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`)))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`)
sources %>% group_by(`Source Type`) %>%
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`)
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`))
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
View(sources)
sources <- read_csv("sources_updated.csv")[-1]
sources <- sources %>% mutate(`Source Type` = ifelse(`Source Type` == "Think Thank", "Think Tank", `Source Type`))
View(sources)
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
colnames(sources)
1+1
2+2
unique(sources$`Organization or Publisher`)
sources %>% group_by(`Organization or Publisher`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Organization or Publisher` = factor(`Organization or Publisher`, levels = unique(`Organization or Publisher`))) %>%
ggplot(aes(x = `Organization or Publisher`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Organization or Publisher") +
ylab("Count")
sources %>% group_by(`Organization or Publisher`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Organization or Publisher` = factor(`Organization or Publisher`, levels = unique(`Organization or Publisher`))) %>%
head(10) %>%
ggplot(aes(x = `Organization or Publisher`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Organization or Publisher") +
ylab("Count")
sources %>% group_by(`Organization or Publisher`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(`Organization or Publisher` = factor(`Organization or Publisher`, levels = unique(`Organization or Publisher`))) %>%
head(10) %>%
ggplot(aes(x = `Organization or Publisher`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Organization or Publisher") +
ylab("Count")
