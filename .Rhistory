geom_bar(stat = 'identity', fill = 'blue', color = "black") +
labs(title = 'Number of DataFrame Rows with a Year',
x = 'Year',
y = 'Number of Rows') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("Publications per Year")
unique(sources$`Organization or Publisher`)
sources %>% group_by(`Organization or Publisher`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(`Organization or Publisher` = factor(`Organization or Publisher`, levels = unique(`Organization or Publisher`))) %>%
head(10) %>%
ggplot(aes(x = `Organization or Publisher`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Kind of Documents?") +
xlab("Organization or Publisher") +
ylab("Count")
View(sources)
sources <- read_csv("sources_updated.csv")[-1]
View(sources)
sources <- read_csv("sources.csv")[-1]
View(sources)
# filter only the relevant fields
sources <- sources %>%
select(`Title`, `Item Type`, Author, `Publication Title`, `File Attachments`, Url, Date, Publisher, Type, `Manual Tags`)
View(sources)
?grepl
?str_detect
# create Contains Recommendations field
sources %>% mutate(`Contains Recommendations` = ifelse(str_detect("rec map", `Manual Tags`), "TRUE", "FALSE"))
str_detect("rec map", "State Department; Reform; rec map")
str_detect("rec\\ map", "State Department; Reform; rec map")
grepl("rec map", "State Department; Reform; rec map")
# create Contains Recommendations field
sources %>% mutate(`Contains Recommendations` = ifelse(grepl("rec map", `Manual Tags`), "TRUE", "FALSE"))
# create Contains Recommendations field
sources %>%
mutate(`Contains Recommendations` = ifelse(grepl("rec map", `Manual Tags`), "TRUE", "FALSE")) %>%
select(-`Manual Tags`)
sources <- read_csv("sources.csv")[-1]
# filter only the relevant fields
sources <- sources %>%
select(`Title`, `Item Type`, Author, `Publication Title`, `File Attachments`, Url, Date, Publisher, Type, `Manual Tags`)
# create Source Type, Document Type, and Organization or Publisher fields
sources <- sources %>%
mutate(`Organization or Publisher` = ifelse(`Item Type` == "magazineArticle", `Publication Title`, Publisher), # combine Publication Title and Publisher to Organization or Publisher
`Source Type` = Type) %>% # add a Source Type based on Report Type parameter from Zotero
# rename document types
mutate(`Document Type` = str_replace(`Item Type`, "report", "Report"),
`Document Type` = str_replace(`Document Type`, "magazineArticle", "Op-Ed"),
`Document Type` = str_replace(`Document Type`, "bookSection", "Book Section"),
`Document Type` = str_replace(`Document Type`, "book", "Book"),
`Document Type` = str_replace(`Document Type`, "document", "Misc Document")) %>%
select(-c(`Publication Title`, Publisher, `Item Type`, Type))
# noncomprehensive lists of organizations in source type categorizing for assigning Source Type to various sources that do not have them via Zotero
magazines <- c("American Purpose", "The Foreign Service Journal", "Just Security", "Foreign Policy", "Democracy Journal", "Responsible Statecraft", "Foreign Affairs")
thinktanks <- c("The Brookings Institution", "The Aspen Institute","Hoover Institution Press, Stanford University", "RAND Corporation")
govt_offices <- c("U.S. Department of State: Office of Inspector General", "U.S. Department of State")
academic <- c("RAND Graduate School", "Institute for the Study of Diplomacy", "Penn State University Press")
nonprofits <- c("Foreign Policy Association", "American Academy of Diplomacy")
# hand-label misc documents' Source Types
sources <- sources %>%
mutate(`Source Type` = ifelse(`Organization or Publisher` %in% govt_offices, "Government Office", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% thinktanks, "Think Tank", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% nonprofits, "Nonprofit", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% academic, "Academic", `Source Type`),
`Source Type` = ifelse(`Organization or Publisher` %in% magazines, "News Media",`Source Type`))
# create Contains Recommendations field
sources <- sources %>%
mutate(`Contains Recommendations` = ifelse(grepl("rec map", `Manual Tags`), "TRUE", "FALSE")) %>%
select(-`Manual Tags`)
colnames(sources)
is.na(sources$Title)
length(is.na(sources$Title))
length(is.na(sources$Title) == TRUE)
length(is.na(sources$Title) == TRUE)
length(sum(is.na(sources$Title) == TRUE))
sum(is.na(sources$Title) == TRUE)
sum(is.na(sources$Title) == TRUE)
sum(is.na(sources$Author) == TRUE)
sum(is.na(sources$`File Attachments`) == TRUE)
sum(is.na(sources$URl) == TRUE)
sum(is.na(sources$Url) == TRUE)
sum(is.na(sources$Date) == TRUE)
sum(is.na(sources$`Organization or Publisher`) == TRUE)
sum(is.na(sources$`Source Type`) == TRUE)
sum(is.na(sources$`Document Type`) == TRUE)
sum(is.na(sources$`Contains Recommendations`) == TRUE)
sources <- sources %>%
mutate(`Path to PDF` = "",
`Document Text` = "")
fpaths_cleaned <- c()
# remove spaces ONLY from start and end of string
remove_spaces <- function(string) {
string <- sub("^\\s+", "", string)
string <- sub("\\s+$", "", string)
string
}
# check if filepath ends in "pdf"
is_pdf <- function(string) {
substr(string,nchar(string)-2,nchar(string)) == "pdf"
}
for (i in 1:nrow(sources)) {
fpath <- sources[i,]$`File Attachments`
# split by semicolon
fpath_cands <- strsplit(fpath, ";")
# remove whitespace on front & back
fpath_cands <- lapply(fpath_cands, remove_spaces)
# return the first one ending with "pdf"
pdf_path_index <- head(which(sapply(fpath_cands, is_pdf)), 1)
new_fpath <- ifelse(length(pdf_path_index) > 0, fpath_cands[[1]][pdf_path_index], "")
if(nchar(new_fpath) != 0) {
sources[i,]$`Path to PDF` <- new_fpath
# get the full text
filetext <- pdf_text(new_fpath)
filetext_cat <- paste(filetext, collapse = " ")
filetext_cleaned <- gsub("\n", "", filetext_cat)
sources[i,]$`Document Text` <- filetext_cleaned
}
}
sum(is.na(sources$`Document Text`))
head(sources$`Document Text`,10)
sources %>% filter(is.na(`File Attachments`))
sources %>% filter(is_empty(`Document Text`))
sources %>% filter(`Document Text` == "")
write_csv(sources, "sources_without_summaries.csv")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- read_csv("sources_with_summaries.csv")
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer,
URL = Url)
View(sources)
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer,
`Contains Recommendations` = Contains-Recommendations
URL = Url)
# select the right rows
sources <- sources %>%
select(-c(`File-Attachments`, `Path-to-PDF`, `Document-Text`)) %>%
rename( `Document Type` = `Document-Type`,
`Organization or Publisher` = `Organization-or-Publisher`,
`Source Type` = `Source-Type`,
`Summary (from GPT)` = answer,
`Contains Recommendations` = Contains-Recommendations,
URL = Url)
sources <- sources %>% rename(`Contains Recommendations` = Contains-Recommendations)
sources <- sources %>% rename(`Contains Recommendations` = `Contains-Recommendations`)
sources$`Summary (from GPT)`
# remove bad GPT summary columns
sources <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "NA"), "", `Summary (from GPT)`))
sources$`Summary (from GPT)`
sources %>% filter(`Summary (from GPT)` == "NA")
colnames(sources)
sources %>% filter(is.na(author))
sources %>% filter(is.na(Author))
sources %>% filter(is.na(`Organization or Publisher`))
sources %>% filter(is.na(`Document Type`))
sources %>% filter(is.na(`Source Type`))
unique(sources$`Document Type`)
unique(sources$`Organization or Publisher`)
sources %>% filter(`Organization or Publisher` == "The U.S. State Department")
unique(sources$`Source Type`)
write_csv(sources, "sources_updated.csv")
sources %>% filter(Title == "Department of State: Comprehensive Plan Needed to Address Persistent Foreign Language Shortfalls")
sources <- sources %>% mutate(`Organization or Publisher` = ifelse(Title == "Department of State: Comprehensive Plan Needed to Address Persistent Foreign Language Shortfalls", "U.S. Government Accountability Office", `Organization or Publisher`)
)
2+2
sources %>% filter(Title == "Department of State: Comprehensive Plan Needed to Address Persistent Foreign Language Shortfalls")
sources %>% filter(`Summary (from GPT)` == "NA")
sources %>% filter(`Summary (from GPT)` == "NA ")
sources %>% filter(`Summary (from GPT)` %contains% "NA")
sources %>% filter("NA" %in% `Summary (from GPT)`)
sources %>% filter(Title == "Project on National Security Reform: The Power of People: Building an Integrated National Security Professional System for the 21st Century")
sources %>% filter(Title == "Road Map for National Security: Imperative for Change")
sources %>% filter(Title == "First Line of Defense: Ambassadors, Embassies and American Interests Abroad")
sources %>% filter(is.na(`Summary (from GPT)`))
# remove bad GPT summary columns
sources <- sources %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "Discusses the document, which is titled"), "", `Summary (from GPT)`)) %>%
mutate(`Summary (from GPT)` = ifelse(str_detect(`Summary (from GPT)`, "NA"), "", `Summary (from GPT)`)) %>%
mutate(`Summary (from GPT)` = ifelse(is.na(`Summary (from GPT)`), "", `Summary (from GPT)`))
sources %>% filter(is.na(`Summary (from GPT)`))
sources$`Summary (from GPT)`
colnames(sources)
sources <- read_csv("sources_updated.csv")[-1]
sources_with_summaries <- sources
unique(sources$`Source Type`)
# change sources to factor. Maybe move this to cleaning document
sources <- sources %>% mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`)))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
coord_flip() +
ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("Source Type") +
ylab("Count")
sources <- read_csv("sources_updated.csv")[-1]
# change sources to factor. Maybe move this to cleaning document
sources <- sources %>% mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`)))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
# xlab("Source Type") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
View(sources)
colnames(sources)
sources <- read_csv("sources_updated.csv")
colnames(sources)
sources <- sources %>% select(-c(`Summary (from GPT)`))
```{r}
full_timeline %>%
ggplot(aes(x = factor(Year), y = as.integer(Count))) +
geom_bar(stat = 'identity',fill = "#027793", color = "#383938") +
labs(title = 'Number of DataFrame Rows with a Year',
x = 'Year',
y = 'Number of Rows') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("Publications per Year")
n_per_year <- sources %>%
group_by(Date) %>%
summarise(count = n())
timeline <- data.frame(Year = 1955:2023, Count = numeric(69))
for (i in 1:nrow(n_per_year)) {
timeline$Count[timeline$Year == n_per_year$Date[i]] <- n_per_year$count[i]
}
pre_1999_count <- timeline %>%
filter(Year <= 1999) %>%
summarise(sum(Count))
timeline_post_2000 <- timeline %>%
filter(Year >= 2000)
full_timeline <- rbind(c(Year = "< 2000", Count = pre_1999_count[1,1]), timeline_post_2000)
full_timeline %>%
ggplot(aes(x = factor(Year), y = as.integer(Count))) +
geom_bar(stat = 'identity',fill = "#027793", color = "#383938") +
labs(title = 'Number of DataFrame Rows with a Year',
x = 'Year',
y = 'Number of Rows') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("Publications per Year")
full_timeline %>%
ggplot(aes(x = factor(Year), y = as.integer(Count))) +
geom_bar(stat = 'identity',fill = "#027793", color = "#383938") +
labs(title = 'Number of DataFrame Rows with a Year',
x = 'Year',
y = 'Number of Publications') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1))
ggtitle("")
full_timeline %>%
ggplot(aes(x = factor(Year), y = as.integer(Count))) +
geom_bar(stat = 'identity',fill = "#027793", color = "#383938") +
labs(title = 'Number of DataFrame Rows with a Year',
x = 'Year',
y = 'Number of Publications') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_y_continuous(labels = scales::number_format(scale = 1, accuracy = 1)) + # remove decimal notation
ggtitle("")
unique(sources$`Organization or Publisher`)
length(unique(sources$`Organization or Publisher`))
sources %>% group_by(`Organization or Publisher`) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
mutate(`Organization or Publisher` = factor(`Organization or Publisher`, levels = unique(`Organization or Publisher`))) %>%
head(10) %>%
ggplot(aes(x = `Organization or Publisher`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
ggtitle("What Organization?") +
xlab("Organization or Publisher") +
ylab("Count")
length(unique(sources$`Organization or Publisher`))
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "blue", color = "black") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
# ggtitle("What Kind of Documents?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
# ggtitle("What Kind of Documents?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938", width = 0.5) +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938", width = 0.5, position = "identity") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_col(stat = "identity", fill = "#027793", color = "#383938", width = 0.5, position = "identity") +
coord_flip() +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938", width = 0.5, position = "identity") +
coord_flip() +
theme(aspect.ratio = 2/1) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
library(tidyverse)
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938", width = 0.5, position = "identity") +
coord_flip() +
theme(aspect.ratio = 1/3) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
theme(aspect.ratio = 1/2) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
theme(aspect.ratio = 2/3) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
theme(aspect.ratio = 3/5) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
theme(aspect.ratio = 1/2) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
coord_flip() +
theme(aspect.ratio = 1/3) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Document Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Document Type` = factor(`Document Type`, levels = unique(`Document Type`))) %>%
ggplot(aes(x = `Document Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
theme(aspect.ratio = 1/3) +
# ggtitle("What Kind of Documents?") +
xlab("") +
ylab("Count")
sources %>% group_by(`Source Type`) %>%
summarise(count = n()) %>%
arrange(count) %>%
mutate(`Source Type` = factor(`Source Type`, levels = unique(`Source Type`))) %>%
ggplot(aes(x = `Source Type`, y = count)) +
geom_bar(stat = "identity", fill = "#027793", color = "#383938") +
geom_text(aes(label = count), hjust = -0.2, size = 3) +
coord_flip() +
theme(aspect.ratio = 1/3) +
# ggtitle("Where Do the Documents Come From?") +
xlab("") +
ylab("Count")
